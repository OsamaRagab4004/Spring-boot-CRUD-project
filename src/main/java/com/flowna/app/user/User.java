package com.flowna.app.user;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.flowna.app.Chat.Chat;
import com.flowna.app.Report.v1.Report;
import com.flowna.app.ReviewSession.v1.ReviewSession;
import com.flowna.app.ScrumBoard.board.Scrumboard;
import com.flowna.app.Tracking.Tracking;
import com.flowna.app.Tracking.tag.Tag;
import com.flowna.app.deck.v1.Deck;
import com.flowna.app.token.Token;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;


@Data
@EqualsAndHashCode(exclude = {"scrumboards","chats"})
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "_user")
@Schema(description = "User entity")
public class User implements UserDetails {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Integer id;
  @Schema(description = "Firstname of the user", example = "Osama")
  @Column
  private String firstname;
  @Schema(description = "Lastname of the user", example = "Abdellatif")
  @Column
  private String lastname;

  @Schema(description = "Unique email, can't be null", example = "example@gmail.com")
  @Column(unique = true,nullable = false)
  private String email;

  @Schema(description = "Password for the account, can't be null, should be at lear 8 characters and with special signs , lower-upper case", example = "Test#32456")
  @Column(nullable = false)
  private String password;

  @Schema(description = "Boolean Variable set by server if the account is verfied using 2FA email or not", example = "true or false")
  @Column
  private boolean verified;
  @Schema(description = "Code generated from server to verify account", example = "")
  @Column
  private String message2FA;
  @Schema(description = "Code generated by Server to reset password for an account", example = "")
  @Column
  private String resetPassword;
  @Schema(description = "Role set by server and depends on the tier of the user", example = "freemium / premium")
  @Enumerated(EnumType.STRING)
  private Role role;

  @Column(nullable = true)
  private String profile_img;
  @Column(nullable = false)
  private int free_credits;
  @Column(nullable = false)
  private int paid_credits;
  @Column
  private boolean subscribed;
  @Column
  private LocalDate end_free_subscription;

  @CreationTimestamp
  @Column(updatable = false)
  private LocalDateTime joined_at;

  @CreationTimestamp
  @Column
  private LocalDateTime updates_at;


  @Schema(description = "Each user has many tokens in the DB, with one is just not expired !", example = "")
  @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
  private List<Token> tokens;

  @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
  private UserPreferences userPreferences;

  @JsonIgnore
  @OneToMany(mappedBy = "user", cascade = CascadeType.ALL,fetch = FetchType.LAZY)
  private List<Deck> decks;


  @JsonIgnore
  @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
  Set<ReviewSession> reviewSessions = new HashSet<>();

  @JsonIgnore
  @OneToMany(mappedBy = "user", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
  List<Report> reports;

  @JsonIgnore
  @OneToMany(mappedBy = "user", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
  Set<Tracking> trackings = new HashSet<>();

  @JsonIgnore
  @OneToMany(mappedBy = "user", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
  Set<Tag> tags = new HashSet<>();



@JsonIgnore
@ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
            name = "user_scrumboard",
            joinColumns = @JoinColumn(
                    name = "user_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(
                    name = "board_id", referencedColumnName = "id"))
  Set<Scrumboard> scrumboards = new HashSet<>();


  @JsonIgnore
  @ManyToMany(mappedBy = "users")
  private Set<Chat> chats = new HashSet<>();




  @Override
  public Collection<? extends GrantedAuthority> getAuthorities() {
    return role.getAuthorities();
  }

  @Override
  public String getPassword() {
    return password;
  }

  @Override
  public String getUsername() {
    return email;
  }

  @Override
  public boolean isAccountNonExpired() {
    return true;
  }

  @Override
  public boolean isAccountNonLocked() {
    return true;
  }

  @Override
  public boolean isCredentialsNonExpired() {
    return true;
  }

  @Override
  public boolean isEnabled() {
    return true;
  }
}
